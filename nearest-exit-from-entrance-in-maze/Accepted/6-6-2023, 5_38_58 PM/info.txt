{"id":965128749,"lang":"cpp","lang_name":"C++","time":"3 days, 2 hours","timestamp":1686053338,"status":10,"status_display":"Accepted","runtime":"140 ms","url":"/submissions/detail/965128749/","is_pending":"Not Pending","title":"Nearest Exit from Entrance in Maze","memory":"29.8 MB","code":"class Solution {\npublic:\n    bool is_safe(int x, int y, int m, int n, vector<vector<char>>& maze) {\n        return (x >= 0 && x < m && y >= 0 && y < n && maze[x][y] == '.');\n    }\n    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {\n        int m = maze.size();\n        int n = maze[0].size();\n        int min_count = 1;\n        queue<pair<int,int>> q;\n        q.push({entrance[0], entrance[1]});\n        int dx[4] = {0,1,0,-1};\n        int dy[4] = {1,0,-1,0};\n        maze[entrance[0]][entrance[1]]='+';\n        while(!q.empty()) {\n            int size = q.size();\n            for (int j = 0; j < size; ++j) {\n                int x = q.front().first;\n                int y = q.front().second;\n                q.pop();\n                for (int i = 0; i < 4; ++i) {\n                    int newx = x+dx[i];\n                    int newy = y+dy[i];\n                    if (!is_safe(newx,newy,m,n,maze)) {\n                        continue;\n                    } \n                    else if (newx == 0 || newx == m-1 || newy == 0 || newy == n-1)\n                        return min_count;\n                    maze[newx][newy] = '+';\n                    q.push({newx,newy});\n                }\n            }\n            min_count++;\n        }\n        return -1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"nearest-exit-from-entrance-in-maze","has_notes":false}