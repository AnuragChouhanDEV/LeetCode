{"id":940208158,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1682532582,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940208158/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"N/A","code":"class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        // sliding window\n        int left = 0;\n        int right = 0;\n        int min_size = INT_MAX;\n        int sum = 0;\n        if (nums.size() == 1) {\n            return nums[0] >= target;\n        }\n        while (left < nums.size()-1) {\n            if (sum < target && right < nums.size()) {\n                sum+=nums[right];\n                right++;\n                // 9,6\n            } else if (sum >= target) {\n                sum-=nums[left];\n                min_size = min(min_size, right-left); \n                left++;\n                // 3,2,5\n            } else {\n                if (right-left >= nums.size())\n                    return 0;\n                left++;\n                // 6\n            }\n        }\n        return min_size;\n    }\n};","compare_result":"11111111111111101111","title_slug":"minimum-size-subarray-sum","has_notes":false}