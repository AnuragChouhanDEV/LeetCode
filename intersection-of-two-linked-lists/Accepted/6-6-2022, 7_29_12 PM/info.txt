{"id":715746937,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1654523952,"status":10,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/715746937/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"17 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int get_length(ListNode *head) {\n        int len = 0;\n        while(head) {\n            len++;\n            head = head->next;\n        }\n        return len;\n    }\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        unordered_set<ListNode *> s;\n        ListNode *tmp = headB;\n        while(tmp) {\n            s.insert(tmp);\n            tmp = tmp->next;\n        }\n        tmp = headA;\n        while(tmp) {\n            if(s.find(tmp) != s.end())\n                return tmp;\n            tmp = tmp->next;\n        }\n        return NULL;\n/*\n        int lenA = get_length(headA);\n        int lenB = get_length(headB);\n        int len = abs(lenA - lenB);\n        ListNode *head1 = NULL;\n        ListNode *head2 = NULL;\n        if (lenA > lenB) {\n            head1 = headA;\n            head2 = headB;\n        } else {\n            head1 = headB;\n            head2 = headA;\n        }\n        while(len) {\n            head1 = head1->next;\n            len--;\n        }\n        while (head1 != head2) {\n            head1 = head1->next;\n            head2 = head2->next;\n        }\n        return head1;\n*/\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists","has_notes":false}