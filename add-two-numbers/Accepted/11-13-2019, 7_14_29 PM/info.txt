{"id":278476328,"lang":"cpp","lang_name":"C++","time":"3Â years, 6Â months","timestamp":1573652669,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/278476328/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"10.3 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        if (l1 == NULL && l2 == NULL)\n            return NULL;\n        else if (l1 == NULL && l2 != NULL)\n            return l2;\n        else if (l1 != NULL && l2 == NULL)\n            return l1;\n        int sum, carry = 0;\n        sum = l1->val + l2->val + carry;\n        carry = sum/10;\n        sum = sum%10;\n        ListNode *head = new ListNode(sum);\n        ListNode *temp = head;\n        ListNode *parser = NULL;\n        l1 = l1->next;\n        l2 = l2->next;\n        \n        while (l1 != NULL && l2 != NULL) {\n            sum = l1->val + l2->val + carry;\n            carry = sum/10;\n            sum = sum%10;\n            ListNode *new_node = new ListNode(sum);\n            temp->next = new_node;\n            temp = temp->next;\n            l1 = l1->next;\n            l2 = l2->next;        \n        }\n        while (l1 == NULL && l2 != NULL) {\n            sum = l2->val + carry;\n            carry = sum/10;\n            sum = sum%10;\n            ListNode *new_node = new ListNode(sum);\n            temp->next = new_node;\n            temp = temp->next;\n            l2 = l2->next;        \n        }\n        while (l1 != NULL && l2 == NULL) {\n            sum = l1->val + carry;\n            carry = sum/10;\n            sum = sum%10;\n            ListNode *new_node = new ListNode(sum);\n            temp->next = new_node;\n            temp = temp->next;\n            l1 = l1->next;\n        }\n        if (l1 == NULL && l2 == NULL && carry) {\n            ListNode *new_node = new ListNode(carry);\n            temp->next = new_node;\n            temp = temp->next;\n        }\n        return head;\n    }\n};","compare_resulttitle_slug":"add-two-numbers","has_notes":false}