{"id":582955129,"lang":"cpp","lang_name":"C++","time":"1 year, 7 months","timestamp":1636212670,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/582955129/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    struct ListNode *Node (int x) {\n        struct ListNode *new_node = new ListNode;\n        new_node->val = x;\n        new_node->next = NULL;\n        return new_node;\n    }\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        int carry = 0;\n        ListNode head = ListNode();\n        ListNode *curr = &head;\n        while(l1 && l2) {\n            curr->next = Node(l1->val + l2->val + carry);\n            curr = curr->next;\n            if (curr->val >= 10) {\n                curr->val = curr->val - 10;\n                carry = 1;\n            } else {\n                carry = 0;\n            }\n            l1 = l1->next;\n            l2 = l2->next;\n        }\n        while (l1) {\n            curr->next = Node(l1->val + carry);\n            carry = 0;\n            curr = curr->next;\n            l1 = l1->next;\n        }\n        while (l2) {\n            curr->next = Node(l2->val + carry);\n            carry = 0;\n            curr = curr->next;\n            l2 = l2->next;\n        }\n        if (carry) {\n            curr->next = Node(carry);\n            curr = curr->next;\n        }\n        //curr->next = NULL;\n        return head.next;\n    }\n};","compare_resulttitle_slug":"add-two-numbers","has_notes":false}