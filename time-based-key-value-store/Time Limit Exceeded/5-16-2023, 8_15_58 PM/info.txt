{"id":951475957,"lang":"cpp","lang_name":"C++","time":"3 weeks, 3 days","timestamp":1684248358,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/951475957/","is_pending":"Not Pending","title":"Time Based Key-Value Store","memory":"N/A","code":"class TimeMap {\npublic:\n    unordered_map<string, vector<pair<int, string>>> ma;\n    TimeMap() {\n        \n    }\n    \n    void set(string key, string value, int timestamp) {\n        ma[key].push_back({timestamp, value});\n    }\n    \n    string get(string key, int timestamp) {\n        auto it = ma.find(key);\n        if (it != ma.end()) {\n            vector<pair<int, string>> tmp(it->second.begin(), it->second.end());\n            int left = 0;\n            int right = tmp.size()-1;\n            int mid = 0;\n\n            while (left <= right) {\n                mid = left + (right-left)/2;\n                if (tmp[mid].first < timestamp) {\n                    if (mid == right || tmp[mid+1].first > timestamp) return tmp[mid].second;\n                    left = mid+1;\n                } else if (tmp[mid].first > timestamp) right = mid-1; \n                else return tmp[mid].second;\n            }\n        }\n        return \"\";\n    }\n};\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap* obj = new TimeMap();\n * obj->set(key,value,timestamp);\n * string param_2 = obj->get(key,timestamp);\n */","compare_result":"11111111111111111111111111111111111111111111000000","title_slug":"time-based-key-value-store","has_notes":false}