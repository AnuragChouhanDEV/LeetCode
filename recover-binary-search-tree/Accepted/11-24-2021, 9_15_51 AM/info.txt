{"id":591808937,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1637725551,"status":10,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/591808937/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"57.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void recoverTreeUtil(TreeNode *root, TreeNode **first, TreeNode **middle, TreeNode **last, TreeNode **prev) {\n        if (!root)\n            return;\n        recoverTreeUtil(root->left, first, middle, last, prev);\n        if (*prev && (*prev)->val > root->val) {\n            if (!*first) {\n                *first = *prev;\n                *middle = root;\n            } else\n                *last = root;\n        }\n        *prev = root;\n        recoverTreeUtil(root->right, first, middle, last, prev);\n    }\n    void recoverTree(TreeNode* root) {\n        TreeNode *first = NULL;\n        TreeNode *middle = NULL;\n        TreeNode *last = NULL;\n        TreeNode *prev = NULL;\n        recoverTreeUtil(root, &first, &middle, &last, &prev);\n        if (first && last)\n            swap((first->val), (last->val));\n        else if (first && middle)\n            swap((first->val), (middle->val));\n    }\n};","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false}