{"id":591443190,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1637661099,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/591443190/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        if (root == NULL)\n            return 1;\n        int result = 0;\n        queue <TreeNode*> q;\n        q.push(root);\n        while (!q.empty()) {\n        int count = q.size();\n        result = max(count, result);\n        while (count--) {\n            TreeNode* temp = q.front();\n            q.pop();\n            //if (temp->left != NULL)\n            if(temp && (temp->left || temp->right)) {\n                q.push(temp->left);\n            //if (temp->right != NULL)\n                q.push(temp->right);\n            }\n            }\n        }\n        return result;\n    }\n};","compare_result":"1110111000100001101101001000011100111101101111101100001001101101001000000100111100101101011000000100001100100000","title_slug":"maximum-width-of-binary-tree","has_notes":false}