{"id":591444990,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1637661539,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/591444990/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"17.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        if(!root) return 0;\n        int result = 1;\n        queue<pair<TreeNode*, int>> Q;\n        Q.push({root, 0});\n        while(!Q.empty()){\n            int count = Q.size();\n            int start = Q.front().second;\n            int end = Q.back().second;\n            result = max(result, end-start+1);\n            for(int i = 0; i < count; ++i){\n                pair<TreeNode*, int> p = Q.front();\n                int idx = p.second - start;\n                Q.pop();\n                if(p.first->left) Q.push({p.first->left, 2*idx+1});\n                if(p.first->right) Q.push({p.first->right, 2*idx+2});\n            }\n            \n        }\n        return result;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false}