{"id":950306968,"lang":"cpp","lang_name":"C++","time":"3 weeks, 4 days","timestamp":1684081745,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/950306968/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"N/A","code":"class Solution {\npublic:\n    bool isSubsetSum(vector<int> &nums, int n, int sum)\n    {\n        bool subset[n + 1][sum + 1];\n        for (int i = 0; i <= n; i++)\n            subset[i][0] = true;\n        for (int i = 1; i <= sum; i++)\n            subset[0][i] = false;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= sum; j++) {\n                if (j < nums[i - 1])\n                    subset[i][j] = subset[i - 1][j];\n                if (j >= nums[i - 1])\n                    subset[i][j]\n                        = subset[i - 1][j]\n                        || subset[i - 1][j - nums[i - 1]];\n            }\n        }\n        for (int i = 0; i <= n; ++i) {\n            for (int j = 0; j <= sum; ++j) {\n                cout << subset[i][j] << \" \";\n            }\n            cout << endl;\n        }\n        return subset[n][sum];\n    }\n \n    bool canPartition(vector<int>& nums) {\n        int ans = 0;\n        for (auto n: nums)\n            ans += n;\n        if (ans % 2 == 1)\n            return false;\n        ans = ans/2;\n        return isSubsetSum(nums, nums.size(), ans);\n    }\n};","compare_result":"111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"partition-equal-subset-sum","has_notes":false}