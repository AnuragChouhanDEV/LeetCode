{"id":706738273,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1653460238,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/706738273/","is_pending":"Not Pending","title":"Ones and Zeroes","memory":"8.8 MB","code":"class Solution {\npublic:\n    void count_0_and_1(int *count, string s) {\n        for (char c:s) {\n            count[c-'0']++;\n            //cout << c-'0' << endl;\n        }\n    }\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        int dp[m+1][n+1];\n        for (int i = m; i >= 0; --i) {\n            for (int j = n; j >= 0; --j) {\n                dp[i][j] = 0;\n            }\n        }\n        for (auto s:strs) {\n            int count[2] = {0};\n            count_0_and_1(count, s);\n            for (int i = m; i >= count[0]; --i) {\n                for (int j = n; j >= count[1]; --j) {\n                    dp[i][j] = max(dp[i][j], 1+dp[i-count[0]][j-count[1]]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"ones-and-zeroes","has_notes":false}