{"id":966779405,"lang":"cpp","lang_name":"C++","time":"22 hours, 3 minutes","timestamp":1686243835,"status":10,"status_display":"Accepted","runtime":"580 ms","url":"/submissions/detail/966779405/","is_pending":"Not Pending","title":"Sort an Array","memory":"144.7 MB","code":"class Solution {\npublic:\n    void merge(vector<int>& nums, int left, int mid, int right) {\n        if (left < right) {\n            int l = left;\n            int r = mid+1;\n            int k = 0;\n            vector<int> tmp(right-left+1, 0);\n            while (l <= mid && r <= right) {\n                if (nums[l] < nums[r]) {\n                    tmp[k] = nums[l];\n                    k++;l++;\n                } else {\n                    tmp[k] = nums[r];\n                    k++;r++;\n                }\n            }\n            while (l <= mid) {\n                    tmp[k] = nums[l];\n                    k++;l++;\n            }\n            while (r <= right) {\n                    tmp[k] = nums[r];\n                    k++;r++;\n            }\n            for (int i = left; i <= right; ++i)\n                nums[i] = tmp[i-left];\n        }\n    }\n    void merge_sort(vector<int>& nums, int left, int right) {\n        if (left < right) {\n            int mid = left + (right-left)/2;\n            merge_sort(nums, left, mid);\n            merge_sort(nums, mid+1, right);\n            merge(nums, left, mid, right);\n        }\n    }\n    vector<int> sortArray(vector<int>& nums) {\n        merge_sort(nums, 0, nums.size()-1);\n        return nums;\n    }\n};","compare_result":"111111111111111111111","title_slug":"sort-an-array","has_notes":false}