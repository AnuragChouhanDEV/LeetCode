{"id":947085561,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1683615109,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/947085561/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"26.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* helper(vector<int>& preorder, int prestart, int preend, vector<int>& inorder, int instart, int inend, unordered_map<int, int> &ma) {\n        if (prestart > preend || instart > inend)\n            return NULL;\n\n        TreeNode* root = new TreeNode(preorder[prestart]);\n        int newinend = ma[preorder[prestart]];\n        int leftcount = newinend - instart;\n        root->left = helper(preorder, prestart+1, prestart+leftcount, inorder, instart, newinend - 1, ma);\n        root->right = helper(preorder, prestart+leftcount+1, preend, inorder, newinend+1, inend, ma);\n        return root;\n    }\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        unordered_map<int, int> ma;\n        for (int i = 0; i < inorder.size(); ++i)\n            ma[inorder[i]] = i;\n        return helper(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1, ma); \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false}