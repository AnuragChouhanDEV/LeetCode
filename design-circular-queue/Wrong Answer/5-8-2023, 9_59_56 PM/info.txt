{"id":946736643,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1683563396,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/946736643/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"class MyCircularQueue {\npublic:\n    vector<int> vec;\n    int size;\n    int front_idx = 0;\n    int rear_idx = -1;\n    MyCircularQueue(int k) {\n        size = k;\n        vec.resize(k,-1);\n    }\n    \n    bool enQueue(int value) {\n        if (isFull())\n            return false;\n        rear_idx = (rear_idx+1)%size;\n        vec[rear_idx] = value;\n        \n        return true;\n    }\n    \n    bool deQueue() {\n        if (isEmpty())\n            return false;\n        vec[front_idx] = -1;\n        front_idx = (front_idx+1)%size;\n        return true;\n    }\n    \n    int Front() {\n        return vec[front_idx];\n    }\n    \n    int Rear() {\n        return vec[rear_idx];\n    }\n    \n    bool isEmpty() {\n        return front_idx == rear_idx;\n    }\n    \n    bool isFull() {\n        return front_idx == 0 ? (rear_idx == size - 1 ? true:false):(front_idx - 1 == rear_idx);\n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"1010100011010101010011100111001110001010011001011100010000","title_slug":"design-circular-queue","has_notes":false}