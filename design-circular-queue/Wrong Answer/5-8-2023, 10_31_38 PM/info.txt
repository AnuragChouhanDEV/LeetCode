{"id":946755871,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1683565298,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/946755871/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"class MyCircularQueue {\npublic:\n    int front;\n    int rear;\n    int size;\n    vector<int> dq;\n    MyCircularQueue(int k) {\n      front = 0;\n      rear = 0;\n      dq.resize(k,-1);\n        size = k;\n    }\n    \n    bool enQueue(int value) {\n       if(isFull())\n       {\n           return false;\n       }\n        if(isEmpty())\n        {\n            front++;\n        }\n        rear = (rear+1)%size;\n        dq[rear] = value;\n        return true;\n    }\n    \n    bool deQueue() {\n       if(isEmpty())\n        {\n          return false;\n        }\n        if(front==rear)\n        {\n            front = rear =-1;\n        }\n        else\n        {\n            dq[front] = -1;\n            front = (front+1)%size;\n        }\n        return true;\n        \n    }\n    \n    int Front() {\n        return dq[front];  \n    }\n    \n    int Rear() {\n        return dq[rear]; \n    }\n    \n    bool isEmpty() {\n        return front==-1 ? true:false;\n    }\n    \n    bool isFull() {\n     return front == (rear + 1)%size ? true : false;   \n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"0010000000000000000000000000000000000000000000000000000000","title_slug":"design-circular-queue","has_notes":false}