{"id":591814725,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1637726423,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/591814725/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode *root, vector<int> &vec) {\n        if (!root)\n            return;\n        inorder(root->left, vec);\n        vec.push_back(root->val);\n        inorder(root->right, vec);\n    }\n    bool isSymmetric(TreeNode* root) {\n        vector<int> vec;\n        inorder(root, vec);\n        int size = vec.size();\n        for (int i = 0; i < size; ++i,--size) {\n            if (vec[i] != vec[size-1])\n                return false;\n        }\n        return true;\n    }\n};","compare_result":"11011111101111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false}