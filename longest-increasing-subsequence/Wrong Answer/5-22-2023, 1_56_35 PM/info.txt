{"id":954980904,"lang":"cpp","lang_name":"C++","time":"2 weeks, 4 days","timestamp":1684743995,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/954980904/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\npublic:\n#if 0\n    int helper(vector<int>& nums, int n, int idx, int prev, vector<int> &dp) {\n        if (idx == n) return 0;\n        if (dp[idx] != -1) return dp[idx];\n        int len = helper(nums, n, idx+1, prev, dp);\n        if (prev == -1 || nums[idx] > nums[prev]) {\n            len = max(len, 1+helper(nums, n, idx+1, idx, dp));\n        }\n        return dp[idx] = len;\n    }\n    int lengthOfLIS(vector<int>& nums) {\n        vector<int> dp(nums.size()+1, -1);\n        return helper(nums, nums.size(), 0, -1, dp);\n        //return dp[nums.size()-1][nums.size()]\n    }\n#else\n    int lengthOfLIS(vector<int>& nums) {\n        vector<int> dp(nums.size(), 1);\n        int res = 0;\n        //vector<vector<int>> dp(nums.size(), vector<int>(nums.size()+1, -1));\n        for (int i = 1; i < nums.size();++i) {\n            for (int j = 0; j < i; ++j) {\n                if (nums[i] > nums[j])\n                    dp[i] = max(dp[i], 1 + dp[j]);\n            }\n            res = max(res,dp[i]);\n        }\n        return res;\n    }\n#endif\n};","compare_result":"111011111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false}