{"id":950033892,"lang":"cpp","lang_name":"C++","time":"3 weeks, 5 days","timestamp":1684042982,"status":10,"status_display":"Accepted","runtime":"1373 ms","url":"/submissions/detail/950033892/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"292.3 MB","code":"class Solution {\npublic:\n    int helper(vector<int>& nums, int n, int idx, int prev, vector<vector<int>> &dp) {\n        if (idx == n) return 0;\n        if (dp[idx][prev+1] != -1) return dp[idx][prev+1];\n        int len = helper(nums, n, idx+1, prev, dp);\n        if (prev == -1 || nums[idx] > nums[prev]) {\n            len = max(len, 1+helper(nums, n, idx+1, idx, dp));\n        }\n        return dp[idx][prev+1] = len;\n    }\n    int lengthOfLIS(vector<int>& nums) {\n        vector<vector<int>> dp(nums.size(), vector<int>(nums.size()+1, -1));\n        return helper(nums, nums.size(), 0, -1, dp);\n        //return dp[nums.size()-1][nums.size()]\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false}