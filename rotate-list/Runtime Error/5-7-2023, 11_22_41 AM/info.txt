{"id":945892120,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1683438761,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/945892120/","is_pending":"Not Pending","title":"Rotate List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int length(ListNode* head) {\n        int len = 0;\n        ListNode* tmp = head;\n        while (tmp) {\n            len++;\n            tmp = tmp->next;\n        }\n        return len;\n    }\n    ListNode* rotateRight(ListNode* head, int k) {\n        int len = length(head);\n        if(k == 0)\n            return head;\n        if (k > len)\n            k = k % len;\n        if (len == 0 || k == len)\n            return head;\n        int itr = len - k;\n        ListNode* prev = NULL;\n        ListNode* curr = head;\n        ListNode* kthnode = NULL;\n        while(itr > 0 && curr) {\n            prev = curr;\n            curr = curr->next;\n            --itr;\n        }\n        if (prev)\n            prev->next = NULL;\n        kthnode = curr;\n        while (curr->next) {\n            curr = curr->next;\n        }\n        if (curr)\n            curr->next = head;\n        head = kthnode;\n        return head;\n    }\n};","compare_result":"111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"rotate-list","has_notes":false}