{"id":945528749,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1683385301,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/945528749/","is_pending":"Not Pending","title":"Rotate List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int len(ListNode *head) {\n        ListNode* tmp = head;\n        int count = 0;\n        while (tmp) {\n            count++;\n            tmp = tmp->next;\n        }\n        return count;\n    }\n    ListNode* rotateRight(ListNode* head, int k) {\n        ListNode* first = head;\n        ListNode* second = head;\n        ListNode* prev = NULL;\n        ListNode* prev_s = NULL;\n        int i = 0;\n        int l = len(head);\n        if (k == 0 || l == 0)\n            return head;\n        if (l == 1)\n            return head;\n        if (k > l) {\n            k = k%l;\n        }\n        while (i < k && first) {\n            first = first->next;\n            ++i;\n        }\n        while (first) {\n            prev = first;\n            first = first->next;\n            prev_s = second;\n            second = second->next;\n        }\n        if (prev)\n            prev->next = head;\n        if (prev_s)\n            prev_s->next = NULL;\n        head = second;\n        return head;\n    }\n};","compare_result":"111111111111111111111111111110111111111110110111111111111111111111111111111111111111111111111111111101111111111101101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false}