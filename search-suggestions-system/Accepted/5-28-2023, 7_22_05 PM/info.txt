{"id":959013566,"lang":"cpp","lang_name":"C++","time":"1 week, 5 days","timestamp":1685281925,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/959013566/","is_pending":"Not Pending","title":"Search Suggestions System","memory":"70.2 MB","code":"class Solution {\npublic:\n    struct TrieNode \n    { \n        struct TrieNode *children[26];\n        bool isEndOfWord; \n    };\n    \n    struct TrieNode *getNode(void) {\n        struct TrieNode *pNode =  new TrieNode;\n        pNode->isEndOfWord = false;\n        for (int i = 0; i < 26; i++)\n            pNode->children[i] = NULL;\n        return pNode;\n    }\n    void insert(struct TrieNode *root, string key)\n    {\n        struct TrieNode *pCrawl = root; \n        for (int i = 0; i < key.length(); i++) {\n            int index = key[i] - 'a';\n            if (!pCrawl->children[index])\n                pCrawl->children[index] = getNode();\n            pCrawl = pCrawl->children[index];\n        }\n        pCrawl->isEndOfWord = true;\n    }\n    bool search(struct TrieNode *root, string key)\n    {\n        struct TrieNode *pCrawl = root;\n        for (int i = 0; i < key.length(); i++) {\n            int index = key[i] - 'a';\n            if (!pCrawl->children[index])\n                return false;\n            pCrawl = pCrawl->children[index];\n        }\n        return (pCrawl->isEndOfWord);\n    }\n    void dfsWithPrefix(TrieNode * curr, string & word, vector<string> & result) {\n        if (result.size() == 3)\n            return;\n        if (curr->isEndOfWord)\n            result.push_back(word);\n\n        for (char c = 'a'; c <= 'z'; c++)\n            if (curr->children[c - 'a']) {\n                word += c;\n                dfsWithPrefix(curr->children[c - 'a'], word, result);\n                word.pop_back();\n            }\n    }\n    vector<string> getWordsStartingWith(string & prefix, struct TrieNode *root) {\n        struct TrieNode *curr = root;\n        vector<string> result;\n\n        // Move curr to the end of prefix in its trie representation.\n        for (char &c : prefix) {\n            if (!curr->children[c - 'a'])\n                return result;\n            curr = curr->children[c - 'a'];\n        }\n        dfsWithPrefix(curr, prefix, result);\n        return result;\n    }\n    vector<vector<string>> suggestedProducts(vector<string>& products, string searchWord) {\n        vector<vector<string>> res;\n        struct TrieNode *trie = getNode();\n        \n        for(string &w:products)\n            insert(trie, w);\n        string prefix;\n        for (char &c : searchWord) {\n            prefix += c;\n            res.push_back(getWordsStartingWith(prefix, trie));\n        }\n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111","title_slug":"search-suggestions-system","has_notes":false}