{"id":592481152,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1637846862,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/592481152/","is_pending":"Not Pending","title":"House Robber III","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int rob(TreeNode* root) {\n        if (!root)\n            return 0;\n        queue<TreeNode *> q;\n        q.push(root);\n        int odd_sum = 0;\n        int even_sum = 0;\n        bool odd = 1;\n        while (!q.empty()) {\n            for (int node_count = q.size(); node_count; --node_count) {\n                TreeNode *node = q.front();\n                if (odd) {\n                    odd_sum += node->val;\n                } else {\n                    even_sum += node->val;\n                }\n                q.pop();\n                if (node->left)\n                    q.push(node->left);\n                if (node->right)\n                    q.push(node->right);\n            }\n            odd = !odd;\n        }\n        return max(odd_sum, even_sum);\n    }\n};","compare_result":"1111111111101101110111101111111101110111111111011111110110111111111001010000000000000000000000000000000000000000000000000000","title_slug":"house-robber-iii","has_notes":false}