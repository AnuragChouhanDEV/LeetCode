{"id":948873301,"lang":"cpp","lang_name":"C++","time":"4Â weeks","timestamp":1683875354,"status":10,"status_display":"Accepted","runtime":"339 ms","url":"/submissions/detail/948873301/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"116.9 MB","code":"class MedianFinder {\npublic:\n    double median = 0;\n    priority_queue<int> maxheap;\n    priority_queue<int, vector<int>, greater<int>> minheap;\n    MedianFinder() {\n        \n    }\n    void balance(void) {\n        int ma = maxheap.size();\n        int mi = minheap.size();\n        if (ma-mi == 2 || ma-mi == -2) {\n            if (ma>mi) {\n                int element = maxheap.top();\n                maxheap.pop();\n                minheap.push(element);\n            } else {\n                int element = minheap.top();\n                minheap.pop();\n                maxheap.push(element);\n            }\n        }\n    }\n    void addNum(int num) {\n        if (maxheap.empty() && minheap.empty())\n            maxheap.push(num);\n        else {\n            if (maxheap.top() < num) {\n                minheap.push(num);\n            } else\n                maxheap.push(num);\n        }\n        balance();\n        if (maxheap.size() == minheap.size()) {\n            int ma = maxheap.top();\n            int mi = minheap.top();\n            median = (double)(ma+mi)/2.0;\n        } else if (maxheap.size() > minheap.size()) {\n            median = maxheap.top();\n        } else\n            median = minheap.top();\n    }\n    \n    double findMedian() {\n        return median;\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false}