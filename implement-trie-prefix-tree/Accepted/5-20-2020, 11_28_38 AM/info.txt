{"id":342065843,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1589954318,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/342065843/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"43.7 MB","code":"class Trie {\npublic:\n    struct TrieNode\n    {\n        char val;\n        int count;\n        int endshere;\n        TrieNode *child[26];\n    };\n    \n    TrieNode *root;\n    \n    TrieNode *get_node(int index)\n    {\n        TrieNode *newnode = new TrieNode;\n        newnode->val = 'a'+index;\n        newnode->count = newnode->endshere = 0;\n        for(int i=0;i<26;++i)\n            newnode->child[i] = NULL;\n        return newnode;\n    }\n    /** Initialize your data structure here. */\n    Trie() {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        root = get_node('/'-'a');\n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        TrieNode *curr = root;\n        int idx;\n        for(int i = 0; word[i]!='\\0';++i) {\n            idx = word[i]-'a';\n            if (curr->child[idx] == NULL)\n                curr->child[idx] = get_node(idx);\n            curr->child[idx]->count += 1;\n            curr = curr->child[idx];\n        }\n        curr->endshere += 1;\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        TrieNode *curr = root;\n        int idx;\n        for(int i = 0; word[i]!='\\0';++i) {\n            idx = word[i]-'a';\n            if (curr->child[idx] == NULL)\n                return false;\n            curr = curr->child[idx];\n        }\n        return (curr->endshere > 0);\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        TrieNode *curr = root;\n        int idx;\n        for(int i = 0; prefix[i]!='\\0';++i) {\n            idx = prefix[i]-'a';\n            if (curr->child[idx] == NULL)\n                return false;\n            curr = curr->child[idx];\n        }\n        return (curr->count > 0);\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false}