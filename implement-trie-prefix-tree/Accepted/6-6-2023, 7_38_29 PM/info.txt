{"id":965197310,"lang":"cpp","lang_name":"C++","time":"3Â days","timestamp":1686060509,"status":10,"status_display":"Accepted","runtime":"97 ms","url":"/submissions/detail/965197310/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"43 MB","code":"class Trie {\npublic:\n    struct TrieNode {\n\t    unordered_map<char,TrieNode*> child;\n\t    bool isEndofWord = false;\n    };\n\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode;\n    }\n    \n    void insert(string word) {\n\t    TrieNode* curr = root;\n\t    if (!curr) return;\n    \tfor (auto x : word) {\n    \t\tif (curr->child.find(x) == curr->child.end()) {\n\t\t\t\t\t//cout << \"insert \" << x << endl;\n\t\t\t\t\tcurr->child[x] = new TrieNode;\n\t\t\t\t}\n    \t\tcurr = curr->child[x];\n    \t}\n\t    curr->isEndofWord = true;\n    }\n    \n    bool search(string word) {\n    \tTrieNode* curr = root;\n\t    if (!curr) return false;\n\t    for (auto x : word) {\n\t\t\t\t//cout << x << \" \";\n\t    \tif (curr->child.find(x) == curr->child.end()) return false;\n\t        curr = curr->child[x];\n\t    }\n\t    return curr->isEndofWord;\n    }\n    \n    bool startsWith(string prefix) {\n      TrieNode* curr = root;\n\t    if (!curr) return false;\n\t    for (auto x : prefix) {\n\t\t\t\tif (curr->child.find(x) == curr->child.end()) return false;\n\t        curr = curr->child[x];\n\t    }\n\t    return true;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false}