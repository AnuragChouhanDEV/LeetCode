{"id":707028837,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1653495902,"status":10,"status_display":"Accepted","runtime":"206 ms","url":"/submissions/detail/707028837/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"8.2 MB","code":"class Solution {\npublic:\n    bool is_palindrome(string s) {\n        int i = 0;\n        int j = s.size()-1;\n        cout << s << endl;\n        while (i < j) {\n            if (s[i] != s[j]) {\n                return false;\n            }\n            i++;j--;\n        }\n        \n        return true;\n    }\n    string longestPalindrome(string s) {\n        int size = s.length();\n        int start = 0;\n        int end = 1;\n        int max_length = 1;\n        bool table[size][size];\n        memset(table, 0, sizeof(table));\n        for (int i = 0; i < size;++i)\n            table[i][i] = true;\n        \n        for (int i = 0; i < size-1;++i) {\n            if (s[i] == s[i+1]) {\n                table[i][i+1] = true;\n                start = i;\n                max_length = 2;\n            }\n        }\n        for (int k = 3; k <= size;++k) {\n            for (int i =0; i < size-k+1;++i) {\n                int j = i+k-1;\n                if (table[i+1][j-1] && s[i] == s[j]) {\n                    table[i][j] = true;\n                    if (k > max_length) {\n                        start = i;\n                        max_length = k;\n                    }\n                }\n            }\n        }\n        \n        return s.substr(start, max_length);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false}