{"id":723934701,"lang":"cpp","lang_name":"C++","time":"11 months, 3 weeks","timestamp":1655410176,"status":10,"status_display":"Accepted","runtime":"274 ms","url":"/submissions/detail/723934701/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"8.1 MB","code":"class Solution {\npublic:\n    int is_palindrome(string s, int l, int r) {\n        int left = l;\n        int right = r;\n        while (left >= 0 && right < s.size() && s[left] == s[right]) {\n            left--;right++;\n        }\n        return right - left -1;\n    }\n    string longestPalindrome(string s) {\n#if 0\n        if (s.size() < 1)\n            return \"\";\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < s.size(); ++i) {\n            int len1 = is_palindrome(s,i,i);\n            int len2 = is_palindrome(s,i,i+1);\n            int len = max(len1, len2);\n            if (len > (end - start)) {\n                start = i - ((len-1)/2);\n                end = i + (len/2);\n                //cout << \"   \" << start << \" \" << end << endl;\n            }\n        }\n        return s.substr(start, end+1);\n#else\n        int size = s.length();\n        int start = 0;\n        int end = 1;\n        int max_length = 1;\n        bool table[size][size];\n        memset(table, 0, sizeof(table));\n        for (int i = 0; i < size;++i)\n            table[i][i] = true;\n        \n        for (int i = 0; i < size-1;++i) {\n            if (s[i] == s[i+1]) {\n                table[i][i+1] = true;\n                start = i;\n                max_length = 2;\n            }\n        }\n        for (int k = 3; k <= size;++k) {\n            for (int i =0; i < size-k+1;++i) {\n                int j = i+k-1;\n                if (table[i+1][j-1] && s[i] == s[j]) {\n                    table[i][j] = true;\n                    if (k > max_length) {\n                        start = i;\n                        max_length = k;\n                    }\n                }\n            }\n        }\n        \n        return s.substr(start, max_length);\n#endif\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false}