{"id":964820312,"lang":"cpp","lang_name":"C++","time":"3 days, 12 hours","timestamp":1686020733,"status":10,"status_display":"Accepted","runtime":"484 ms","url":"/submissions/detail/964820312/","is_pending":"Not Pending","title":"Design Graph With Shortest Path Calculator","memory":"80.1 MB","code":"class Graph {\npublic:\n    vector<vector<pair<int,int>>> adj;\n    Graph(int n, vector<vector<int>>& edges) {\n        adj.resize(n);\n        for (auto e:edges)\n            adj[e[0]].push_back({e[1], e[2]});\n    }\n    \n    void addEdge(vector<int> edge) {\n        adj[edge[0]].push_back({edge[1], edge[2]});\n    }\n    \n    int shortestPath(int node1, int node2) {\n        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;\n        pq.push({0,node1});\n        vector<int> cost(adj.size(), INT_MAX);\n        cost[node1]=0;\n\n        while(!pq.empty()) {\n            int curr_cost = pq.top().first;\n            int curr_node = pq.top().second;\n            pq.pop();\n\n            for (auto neighbour:adj[curr_node]) {\n                if (cost[neighbour.first] > cost[curr_node] + neighbour.second) {\n                    cost[neighbour.first] = cost[curr_node] + neighbour.second;\n                    pq.push({cost[neighbour.first], neighbour.first});\n                }\n            }\n        }\n        return cost[node2] == INT_MAX ? -1: cost[node2];\n    }\n};\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph* obj = new Graph(n, edges);\n * obj->addEdge(edge);\n * int param_2 = obj->shortestPath(node1,node2);\n */","compare_result":"111111111111111111111111111111111111","title_slug":"design-graph-with-shortest-path-calculator","has_notes":false}