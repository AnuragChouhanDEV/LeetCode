{"id":956570314,"lang":"cpp","lang_name":"C++","time":"2 weeks, 1 day","timestamp":1684947346,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/956570314/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"13.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* bfp(vector<int>& preorder, int prestart, int preend, vector<int>& inorder, int instart, int inend, unordered_map<int,int> &ma) {\n        if (prestart > preend || instart > inend) return NULL;\n        TreeNode *root = new TreeNode(preorder[prestart]);\n        int newinend = ma[root->val];\n        int leftcount = newinend-instart;\n        root->left = bfp(preorder, prestart+1, prestart+leftcount, inorder, instart, newinend-1, ma);\n        root->right = bfp(preorder, prestart+leftcount+1, preend, inorder, newinend+1, inend, ma);\n        return root;\n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        vector<int> inorder(preorder.begin(), preorder.end());\n        sort(inorder.begin(), inorder.end());\n        unordered_map<int,int> ma;\n        for(int i = 0; i < inorder.size();++i) ma[inorder[i]]=i;\n        TreeNode* root = bfp(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1, ma);\n        return root;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false}