{"id":952765870,"lang":"cpp","lang_name":"C++","time":"3 weeks, 1 day","timestamp":1684420528,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/952765870/","is_pending":"Not Pending","title":"Longest Palindrome by Concatenating Two Letter Words","memory":"N/A","code":"class Solution {\npublic:\n    bool self_palindrome(string s) {\n        int left = 0;\n        int right = s.size()-1;\n        while (left < right) {\n            if (s[left] != s[right])\n                return false;\n            left++;right--;\n        }\n        return true;\n    }\n    bool pair_palindrome(string s1, string s2) {\n        if (s1.size() != s2.size()) return false;\n        int lefts1 = 0;\n        int rights2 = s2.size()-1;\n        while (lefts1 < s1.size() && rights2 >= 0) {\n            if (s1[lefts1] != s2[rights2])\n                return false;\n            lefts1++;rights2--;\n        }\n        return true;\n    }\n    int longestPalindrome(vector<string>& words) {\n        // self palindrome maxsize = size of it\n        // 2 diff palindrome maxsize_size of both\n        int max_size = 0;\n        int self_pld_idx = -1;\n        for (int i = 0; i < words.size(); ++i) {\n            string word = words[i];\n            if (self_palindrome(word)) {\n                if (max_size < word.size()) {\n                    self_pld_idx = i;\n                    max_size = word.size();\n                }\n            }\n        }\n        if (self_pld_idx != -1) words.erase(words.begin()+self_pld_idx);\n        vector<unordered_map<char, int>> vec;\n        for (int i = 0; i < words.size(); ++i) {\n            unordered_map<char, int> tmp;\n            string word = words[i];\n            for (char c:word)\n                tmp[c]++;\n            for (int j = 0; j < vec.size(); ++j) {\n                if (vec[j] == tmp) {\n                    if (pair_palindrome(word, words[j])) {\n                        max_size = max(max_size, max_size + (((int)words[j].size()) * 2));\n                        //vec.erase(vec.begin()+j);\n                    }\n                }\n            }\n#if 0          \n            auto it = ma.find(tmp)\n            if (it != ma.end()) {\n                if (pair_palindrome(word, words[it.second])) {\n                    max_size = max(max_size, max_size + word.size() * 2);\n                    ma.erase(it.first);\n                }\n            } else\n#endif\n                vec.push_back(tmp);        \n        }\n        return max_size;\n    }\n};","compare_result":"111111100110010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-palindrome-by-concatenating-two-letter-words","has_notes":false}