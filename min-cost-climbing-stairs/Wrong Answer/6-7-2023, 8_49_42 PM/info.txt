{"id":965976180,"lang":"cpp","lang_name":"C++","time":"1 day, 23 hours","timestamp":1686151182,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/965976180/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"N/A","code":"class Solution {\npublic:\n#if 0\n    int dp[1002];\n    int _mcs(vector<int>& cost, int n) {\n        if (n <= 0) return 0;\n        if (dp[n] != -1) return dp[n];\n        return dp[n] = min(_mcs(cost,n-1) + cost[n], _mcs(cost,n-2) + cost[n-1]);\n    }\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size()-1;\n        memset(dp, -1, sizeof(dp));\n        return _mcs(cost, n);\n    }\n#else\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n        vector<int> dp(n,0);\n        if (n == 1) return cost[0];\n        if (n == 2) return min(cost[0], cost[1]);\n        if (n == 3) return min(cost[0]+cost[2], cost[1]);\n        dp[0] = cost[0];\n        dp[1] = min(cost[0], cost[1]);\n        for (int i = 2; i < n; ++i) {\n            dp[i] = min(dp[i-1] + cost[i], dp[i-2] + cost[i-1]);\n        }\n        return dp[n-1];\n    }\n#endif\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111011100110001111101110011000111111111011100111111111111110111111101110011000111110111001100011111011100110001111111110111001111110111001100011111011100110001111101110011000111110111001100011000001111001001000111111","title_slug":"min-cost-climbing-stairs","has_notes":false}