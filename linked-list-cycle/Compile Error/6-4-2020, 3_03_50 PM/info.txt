{"id":348886335,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1591263230,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/348886335/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n    if (head == null || head->next == null) {\n        return false;\n    }\n    ListNode *slow = head;\n    ListNode *fast = head->next;\n    while (slow != fast) {\n        if (fast == null || fast->next == null) {\n            return false;\n        }\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    return true;\n    }\n};","compare_result":null,"title_slug":"linked-list-cycle","has_notes":false}