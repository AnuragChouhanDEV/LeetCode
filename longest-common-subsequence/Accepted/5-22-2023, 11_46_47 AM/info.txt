{"id":954917617,"lang":"cpp","lang_name":"C++","time":"2 weeks, 4 days","timestamp":1684736207,"status":10,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/954917617/","is_pending":"Not Pending","title":"Longest Common Subsequence","memory":"24.5 MB","code":"class Solution {\npublic:\n    int lcs(string text1, string text2, int n, int m, vector<vector<int>> &dp) {\n        if (n < 0 || m < 0) return 0;\n        if (dp[n][m] != -1) return dp[n][m];\n        if (text1[n] == text2[m]) return dp[n][m]=1+lcs(text1, text2, n-1,m-1,dp);\n        else return dp[n][m]=max(lcs(text1, text2, n-1,m,dp), lcs(text1, text2, n,m-1,dp));\n    }\n    int longestCommonSubsequence(string text1, string text2) {\n        int n = text1.size();\n        int m = text2.size();\n        if (n < 0 || m < 0) return 0;\n        vector<vector<int>> dp(text1.size()+1, vector<int> (text2.size()+1, 0));\n        //return lcs(text1, text2, text1.size()-1, text2.size()-1, dp);\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= m; ++j) {\n                if (text1[i-1] == text2[j-1]) \n                    dp[i][j] = 1+dp[i-1][j-1];\n                else\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n        return dp[n][m];\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"longest-common-subsequence","has_notes":false}