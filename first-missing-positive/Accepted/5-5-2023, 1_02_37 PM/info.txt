{"id":944817608,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1683271957,"status":10,"status_display":"Accepted","runtime":"81 ms","url":"/submissions/detail/944817608/","is_pending":"Not Pending","title":"First Missing Positive","memory":"41.1 MB","code":"class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        bool one = false;\n        int n = nums.size();\n        if (n == 1 && nums[0] != 1) {\n            return 1;\n        }\n        if (n==1 && nums[0] == 1)\n            return 2;\n        for (auto it:nums) {\n            if(it==1) \n                one = true;\n        }\n        if (!one)\n            return 1;\n        for (int i = 0; i < n;++i)\n            if ((nums[i] <= 0) || (nums[i] > n))\n                nums[i] = 1;\n        for (int i = 0; i < n; ++i) {\n            int x = abs(nums[i]);\n            if (nums[x-1] > 0)\n                nums[x-1] *= -1;\n        }\n        for (int i = 0; i < n; ++i)\n            if (nums[i] > 0)\n                return i+1;\n        return n+1;\n/*\n        unordered_set<int> s;\n        for (auto it:nums) {\n            if (it > 0)\n                s.insert(it);\n        }\n        for (int i = 1; i <= nums.size();++i) {\n            if (s.find(i) == s.end())\n                return i;\n        }\n        return nums.size()+1;\n*/\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"first-missing-positive","has_notes":false}