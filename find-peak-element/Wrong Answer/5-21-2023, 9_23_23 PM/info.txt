{"id":954585837,"lang":"cpp","lang_name":"C++","time":"2 weeks, 4 days","timestamp":1684684403,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/954585837/","is_pending":"Not Pending","title":"Find Peak Element","memory":"N/A","code":"class Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        int n = nums.size();\n        int left = 0;\n        int right = nums.size()-1;\n        //int n = nums.size();\n        if (n == 1)\n            return nums[0];\n        if (n == 2)\n            return nums[0] > nums[1] ? nums[0] : nums[1];\n        while(left <= right) {\n            int mid = left + (right-left)/2;\n            if (mid - 1 >= 0 && nums[mid] > nums[mid-1] && mid + 1 >= n)\n                return mid;\n            else if (mid - 1 < 0 && nums[mid] > nums[mid+1] && mid + 1 < n)\n                return mid;\n            else if (nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1])\n                return mid;\n            else if (nums[mid] < nums[mid-1] && nums[mid] > nums[mid+1])\n                right = mid-1;\n            else\n                left = mid+1;\n        }\n        return nums[0];\n    }\n};\n\n// 1 2 3 8 7 6 5 4 3 2 1","compare_result":"110000001111111111111110000000000000000000000000000000000000000000","title_slug":"find-peak-element","has_notes":false}