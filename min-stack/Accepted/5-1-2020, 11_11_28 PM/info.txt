{"id":332816072,"lang":"cpp","lang_name":"C++","time":"3 years, 1 month","timestamp":1588354888,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/332816072/","is_pending":"Not Pending","title":"Min Stack","memory":"16.3 MB","code":"class MinStack {\n  int stack[10000];\n    int min[10000];\n    int topPtr;\n    int minPtr;\npublic:\n    /** initialize your data structure here. */\n    MinStack() {\n        topPtr = -1;\n        minPtr = -1;\n    }\n    \n    void push(int x) {\n        if(topPtr >= 10000)\n            return;\n        \n        stack[++topPtr] = x;\n        \n        if(minPtr >= 0)\n        {\n            if(min[minPtr] > x)\n                min[++minPtr] = x;\n            else\n            {\n                min[minPtr+1] = min[minPtr];\n                minPtr += 1;\n            }\n        }\n        else\n            min[++minPtr] = x;\n                \n    }\n    \n    void pop() {\n        if(topPtr < 0)      //Underflow\n            return;\n        \n        topPtr -= 1;\n        minPtr -= 1;\n    }\n    \n    int top() {        \n        return stack[topPtr];\n    }\n    \n    int getMin() {\n        return min[minPtr];\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(x);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */","compare_result":"111111111111111111","title_slug":"min-stack","has_notes":false}