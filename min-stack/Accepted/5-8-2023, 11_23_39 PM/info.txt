{"id":946787614,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1683568419,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/946787614/","is_pending":"Not Pending","title":"Min Stack","memory":"16.3 MB","code":"class MinStack {\npublic:\n    stack<pair<int,int>> st;\n    MinStack() {\n        \n    }\n    \n    void push(int val) {\n        if (st.empty())\n            st.push({val,val});\n        else {\n            int m = min(val, st.top().second);\n            st.push({val,m});\n        }\n\n    }\n    \n    void pop() {\n        if (!st.empty())\n            st.pop();\n    }\n    \n    int top() {\n        if (!st.empty())\n            return st.top().first;\n        return 0;\n    }\n    \n    int getMin() {\n        if (!st.empty())\n            return st.top().second;\n        return 0;\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(val);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false}