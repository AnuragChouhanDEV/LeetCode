{"id":956574097,"lang":"cpp","lang_name":"C++","time":"2 weeks, 1 day","timestamp":1684947730,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/956574097/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (!root) return NULL;\n        if (root->val < p->val && root->val < q->val)\n            return lowestCommonAncestor(root->left,p,q);\n        else if (root->val > p->val && root->val > q->val)\n            return lowestCommonAncestor(root->left,p,q);\n        else return root;\n    }\n};","compare_result":"111111111111111101111110000010","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false}