{"id":722854227,"lang":"cpp","lang_name":"C++","time":"11 months, 4 weeks","timestamp":1655297666,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/722854227/","is_pending":"Not Pending","title":"Reverse Nodes in k-Group","memory":"11.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int length(ListNode *head) {\n        if (!head)\n            return 0;\n        return 1+length(head->next);\n    }\n    \n    ListNode* reverseKGroup_rec(ListNode* head, int k, int len) {\n        ListNode *curr = head;\n        ListNode *next;\n        ListNode *prev = NULL;\n        int i = 0;\n        if (len < k)\n            return head;\n        while (curr && i < k) {\n            next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n            ++i;\n        }\n        if (next)\n            head->next = reverseKGroup_rec(next, k, len-k);\n        return prev;\n    }\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        int len = length(head);\n        cout << len << endl;\n        return reverseKGroup_rec(head, k, len);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-k-group","has_notes":false}