{"id":332224692,"lang":"cpp","lang_name":"C++","time":"3 years, 1 month","timestamp":1588241989,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/332224692/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"13.5 MB","code":"class Solution {\npublic:\n// A utility funtion to find maximum of two integers \nint max(int a, int b) { return (a > b)? a : b; } \n  \n// A utility funtion to find maximum of three integers \nint max(int a, int b, int c) { return max(max(a, b), c); } \n  \n// Find the maximum possible sum in arr[] auch that arr[m] is part of it \nint maxCrossingSum(int arr[], int l, int m, int h) \n{ \n    // Include elements on left of mid. \n    int sum = 0; \n    int left_sum = INT_MIN; \n    for (int i = m; i >= l; i--) \n    { \n        sum = sum + arr[i]; \n        if (sum > left_sum) \n          left_sum = sum; \n    } \n  \n    // Include elements on right of mid \n    sum = 0; \n    int right_sum = INT_MIN; \n    for (int i = m+1; i <= h; i++) \n    { \n        sum = sum + arr[i]; \n        if (sum > right_sum) \n          right_sum = sum; \n    } \n  \n    // Return sum of elements on left and right of mid \n    // returning only left_sum + right_sum will fail for [-2, 1] \n    return max(left_sum + right_sum, left_sum, right_sum); \n} \n  \n// Returns sum of maxium sum subarray in aa[l..h] \nint maxSubArraySum(int arr[], int l, int h) \n{ \n   // Base Case: Only one element \n   if (l == h) \n     return arr[l]; \n  \n   // Find middle point \n   int m = (l + h)/2; \n  \n   /* Return maximum of following three possible cases \n      a) Maximum subarray sum in left half \n      b) Maximum subarray sum in right half \n      c) Maximum subarray sum such that the subarray crosses the midpoint */\n   return max(maxSubArraySum(arr, l, m), \n              maxSubArraySum(arr, m+1, h), \n              maxCrossingSum(arr, l, m, h)); \n}\n    int maxSubArray(vector<int>& nums) {\n        int arr[nums.size()];\n        std::copy(nums.begin(),nums.end(),arr);\n        return maxSubArraySum(arr, 0, (nums.size() - 1));\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-subarray","has_notes":false}