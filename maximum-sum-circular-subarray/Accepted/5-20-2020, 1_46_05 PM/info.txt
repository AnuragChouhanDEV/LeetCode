{"id":342107492,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1589962565,"status":10,"status_display":"Accepted","runtime":"180 ms","url":"/submissions/detail/342107492/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"40.1 MB","code":"class Solution {\npublic:\n    int maxSubarraySumCircular(vector<int>& A) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        \n        int n = A.size();\n        int max_straight_SUM = INT_MIN;\n        int min_straight_SUM = INT_MAX;\n        \n        int array_SUM = 0;\n        \n        int temp_maxSUM = 0;\n        int temp_minSUM = 0;\n        \n        for(int i=0;i<n;++i)\n        {\n            array_SUM +=A[i];\n            \n            temp_maxSUM += A[i];\n            max_straight_SUM = max_straight_SUM<temp_maxSUM? temp_maxSUM:max_straight_SUM;\n            temp_maxSUM = temp_maxSUM<0?0:temp_maxSUM;\n            \n            temp_minSUM += A[i];\n            min_straight_SUM = min_straight_SUM>temp_minSUM? temp_minSUM:min_straight_SUM;\n            temp_minSUM = temp_minSUM>0?0:temp_minSUM;\n        }\n        cout << max_straight_SUM << \" \" << min_straight_SUM << endl;\n        cout << array_SUM << endl;\n        cout << temp_maxSUM << \" \" << temp_minSUM << endl;\n        if(array_SUM==min_straight_SUM)\n            return max_straight_SUM;\n        return max(max_straight_SUM,(array_SUM-min_straight_SUM));\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray","has_notes":false}