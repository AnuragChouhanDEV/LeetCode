{"id":349434127,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1591374730,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/349434127/","is_pending":"Not Pending","title":"Convert Sorted Array to Binary Search Tree","memory":"20.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    TreeNode* construct_bst(vector<int>& nums, int min, int max) {\n        if (min > max)\n            return NULL;\n        int mid = min + (max - min) / 2;\n        TreeNode *curr = new TreeNode(nums[mid]);\n        curr->left = construct_bst(nums, min, mid - 1);\n        curr->right = construct_bst(nums, mid + 1, max);\n        return curr;\n    } \npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        if (nums.size() == 0)\n            return NULL;\n        return construct_bst(nums, 0, nums.size() - 1);\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-array-to-binary-search-tree","has_notes":false}