{"id":949064901,"lang":"cpp","lang_name":"C++","time":"4Â weeks","timestamp":1683903552,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/949064901/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"15.9 MB","code":"class Solution {\npublic:\n    int helper(vector<vector<int>>& grid, int r, int c, int R, int C, vector<vector<int>> &visited) {\n        if (r >= R || c >= C || r < 0 || c < 0) {\n            return 0;\n        }\n        if (visited[r][c] != 0)\n            return visited[r][c];\n        int curr_max = 1;\n        if (r+1 < R && grid[r+1][c] > grid[r][c])\n            curr_max = max(curr_max, 1+helper(grid, r+1, c, R, C, visited));\n        if (c+1 < C && grid[r][c+1] > grid[r][c])\n            curr_max = max(curr_max, 1+helper(grid, r, c+1, R, C, visited));\n        if (r-1 >= 0 && grid[r-1][c] > grid[r][c])\n            curr_max = max(curr_max, 1+helper(grid, r-1, c, R, C, visited));\n        if (c-1 >= 0 && grid[r][c-1] > grid[r][c])\n            curr_max = max(curr_max, 1+helper(grid, r, c-1, R, C, visited));\n\n         visited[r][c] = curr_max;\n         return curr_max;\n    }\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        int R = matrix.size();\n        int C = matrix[0].size();\n        int count = 0;\n        vector<vector<int>> visited(R, vector<int>(C,0));\n\n        for (int i = 0; i < R; ++i) {\n            for (int j = 0; j < C; ++j) {\n                count = max(count, helper(matrix, i, j, R, C, visited));\n            }\n        }\n        return count;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false}