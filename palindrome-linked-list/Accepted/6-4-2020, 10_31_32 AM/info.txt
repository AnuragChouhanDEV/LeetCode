{"id":348791969,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1591246892,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/348791969/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"14.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    ListNode* reverseList(ListNode* head) {\n        ListNode *prev = NULL;\n        ListNode *next = NULL;\n        ListNode *curr = head;\n        while(curr) {\n            next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        head = prev;\n        return head;\n    }\npublic:\n    bool isPalindrome(ListNode* head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        ListNode* prev = slow;\n        ListNode* rev;\n        if (!head)\n            return true;\n        while(fast && fast->next) {\n            prev = slow;\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        prev->next = NULL;\n        rev = reverseList(slow);\n        while (head && rev) {\n            if (head->val != rev->val)\n                return false;\n            head = head->next;\n            rev = rev->next;\n        }\n        return true;\n    }\n};","compare_result":"11111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false}