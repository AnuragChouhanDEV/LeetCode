{"id":349760153,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1591442715,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/349760153/","is_pending":"Not Pending","title":"Queue Reconstruction by Height","memory":"N/A","code":"class Solution {\n    void swap (int &a, int &b) {\n        int t = a;\n        a = b;\n        b = t;\n    }\n    static bool sortcol( const vector<int>& v1, \n               const vector<int>& v2 ) { \n        return v1[1] < v2[1]; \n    }\npublic:\n    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {\n        int len = people.size();\n        sort(people.begin(), people.end(), sortcol);\n        for (int i = 1; i < len; ++i) {\n            int count = 1;\n            while (people[i][1] == people[i-1][1]) {\n                count++;\n                ++i;\n            }\n            //cout << count << endl;\n            sort(people.begin() + i - count, people.begin() + i);\n        }\n        for (int i = len - 1; i > 0; --i) {\n            if (people[i][1] == 0)\n                continue;\n            int count_1 = people[i][1];\n            int count_2 = 0;\n            int j = i;\n\n            while (j > 0) {\n                if (people[i][0] <= people[j-1][0])\n                    count_2++;\n                j--;\n            }\n            if (count_2 - count_1 > 0) {\n                swap(people[i][0], people[i-(count_2 - count_1)][0]);\n                swap(people[i][1], people[i-(count_2 - count_1)][1]);\n                count_2--;\n                i++;\n            }     \n        }\n        \n        return people;\n    }\n};","compare_result":"1000000000000000000000000000000000000","title_slug":"queue-reconstruction-by-height","has_notes":false}