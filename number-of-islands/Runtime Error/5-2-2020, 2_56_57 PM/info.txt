{"id":333114463,"lang":"cpp","lang_name":"C++","time":"3 years, 1 month","timestamp":1588411617,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/333114463/","is_pending":"Not Pending","title":"Number of Islands","memory":"N/A","code":"class Solution {\n     void mark_island(vector<vector<char>> &matrix,int x,int y,int r,int c)\n    {\n        if(x<0 || x>=r || y<0 || y>=c || matrix[x][y]!='1')  //Boundary case for matrix\n            return;\n        \n        //Mark current cell as visited\n        matrix[x][y] = '2';\n        \n        //Make recursive call in all 4 adjacent directions\n        mark_island(matrix,x+1,y,r,c);  //DOWN\n        mark_island(matrix,x,y+1,r,c);  //RIGHT\n        mark_island(matrix,x-1,y,r,c);  //TOP\n        mark_island(matrix,x,y-1,r,c);  //LEFT\n    }\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        int no_of_islands = 0;\n        \n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < cols; ++j) {\n                if (grid[i][j] == '1')\n                {\n                    mark_island(grid,i,j,rows,cols);\n                    no_of_islands += 1;\n                }\n            }\n        }\n        return no_of_islands;\n    }\n};","compare_result":"11000000000000000000000000000000000000000000000","title_slug":"number-of-islands","has_notes":false}