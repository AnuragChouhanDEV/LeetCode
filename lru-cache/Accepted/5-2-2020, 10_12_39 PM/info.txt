{"id":333272190,"lang":"cpp","lang_name":"C++","time":"3 years, 1 month","timestamp":1588437759,"status":10,"status_display":"Accepted","runtime":"388 ms","url":"/submissions/detail/333272190/","is_pending":"Not Pending","title":"LRU Cache","memory":"42.2 MB","code":"class LRUCache {\n        list<pair<int,int>> cache;\n        unordered_map<int,list<pair<int,int>>::iterator> mymap;  //Key, address in dequeue PAIR\n        \n        void refreshPosition(int key,int value)\n        {\n            cache.erase(mymap[key]);\n            cache.push_front(make_pair(key,value));\n            mymap[key] = cache.begin();     //Addr of new position stored in map\n        }\n    int capacity;\npublic:\n    LRUCache(int capacity) {\n        this->capacity = capacity;\n    }\n    \n    int get(int key) {\n        if(mymap.find(key)!=mymap.end())\n        {\n            refreshPosition(key,(*mymap[key]).second);\n            return (*mymap[key]).second;\n        }\n        return -1;\n    }\n    \n    void put(int key, int value) {\n        if(mymap.find(key)!=mymap.end())\n            refreshPosition(key,value);\n        else\n        {\n            //Add to cache\n            cache.push_front(make_pair(key,value));\n            mymap[key] = cache.begin();\n            if(mymap.size()>capacity)\n            {\n                mymap.erase(cache.back().first);\n                cache.pop_back();\n            }\n        }\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"111111111111111111","title_slug":"lru-cache","has_notes":false}