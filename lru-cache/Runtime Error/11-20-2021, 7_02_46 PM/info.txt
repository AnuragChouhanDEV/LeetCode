{"id":590002488,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1637415166,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/590002488/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\npublic:\n    class Node {\n        public:\n        int key;\n        int value;\n        Node *next;\n        Node *prev;\n        Node (int k, int v) {\n            key = k;\n            value = v;\n            next = NULL;\n            prev = NULL;\n        }\n    };\n    int capacity;\n    Node *head;\n    Node *tail;\n    map<int, Node *> ma;\n    \n    LRUCache(int cap) {\n        capacity = cap;\n        head = tail = NULL;\n        //cout << \"here 1 \" << endl;\n    }\n    \n    void add_node(Node *node) {\n        if (head == NULL && tail == NULL) {\n            //cout << \"adding \" << node->key << \" \" << node->value << endl;\n            head = tail = node;\n        } else {\n            node->next = head;\n            head->prev = node;\n            head = node;\n            //cout << \"adding \" << node->key << \" \" << node->value << endl;\n        }\n    }\n    \n    void del_node(Node *node) {\n        if (node == head) {\n            head = head->next ? head->next : NULL;\n            if (head)\n                head->prev = NULL;\n            delete node;\n            return;\n        }\n        if (node == tail) {\n            tail = tail->prev ? tail->prev : NULL;\n            if (tail)\n                tail->next = NULL;\n            tail->next = NULL;\n            delete node;\n            return;\n        }\n        node->prev->next = node->next;\n        node->next->prev = node->prev;\n        delete node;\n    }\n    \n    int get(int key) {\n        if (ma.find(key) != ma.end()) {\n            Node *tmp = ma[key];\n            int value = tmp->value;\n            ma.erase(key);\n            del_node(tmp);\n            tmp = new Node({key,value});\n            add_node(tmp);\n            ma[key] = tmp;\n            //cout << \"here 3 \" << endl;\n            return value;\n        }\n        return -1;\n    }\n    \n    void put(int key, int value) {\n        if (ma.find(key) != ma.end()) {\n            Node *tmp = ma[key];\n            ma.erase(key);\n            del_node(tmp);\n            tmp = new Node({key,value});\n            add_node(tmp);\n            ma[key] = tmp;\n        } else if (ma.size() == capacity){\n            ma.erase(tail->key);\n            del_node(tail);\n            Node *tmp = new Node({key,value});\n            add_node(tmp);\n            ma[key] = tmp;\n        } else {\n            Node *tmp = new Node({key,value});\n            add_node(tmp);\n            ma[key] = tmp;\n            //cout << \"here 2 \" << endl;\n        }\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1110000000000000000000","title_slug":"lru-cache","has_notes":false}