{"id":961725374,"lang":"cpp","lang_name":"C++","time":"1Â week","timestamp":1685633129,"status":10,"status_display":"Accepted","runtime":"73 ms","url":"/submissions/detail/961725374/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"20 MB","code":"class Solution {\npublic:\n    bool is_safe(vector<vector<int>>& grid, int x, int y, int size) {\n        return (x >= 0 && y >= 0 && x < size && y < size && grid[x][y] == 0);\n    }\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        if (grid[0][0] == 1 || grid[grid.size()-1][grid.size()-1] == 1) return -1;\n\n        for (int i = 0; i < grid.size(); ++i) {\n            for (int j = 0; j < grid[0].size(); ++j) {\n                if (grid[i][j] == 1) grid[i][j] = 1000000;\n            }\n        }\n        grid[0][0] = 1;\n        int dr[8] = {0,1,0,-1,1,-1,-1,1};\n        int dc[8] = {1,0,-1,0,1,1,-1,-1};\n        queue<pair<int,pair<int,int>>> q;\n        q.push({1,{0,0}});\n        while(!q.empty()) {\n            auto it = q.front();\n            int dist = it.first;\n            int x = it.second.first;\n            int y = it.second.second;\n            q.pop();\n            if (x == grid.size()-1 && y == grid.size()-1) return dist;\n\n            for (int i = 0; i < 8; ++i) {\n                int newx = x+dr[i];\n                int newy = y+dc[i];\n                if (is_safe(grid, newx, newy, grid.size())) {\n                    grid[newx][newy] = dist+1;\n                    q.push({dist+1, {newx,newy}});\n                }\n            }\n        } \n\n        return grid[grid.size()-1][grid.size()-1] ? grid[grid.size()-1][grid.size()-1]:-1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false}