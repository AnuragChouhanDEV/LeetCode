{"id":597247851,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1638696550,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/597247851/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int search(vector<int>& in, int strt, int end, char value)\n    {\n        int i;\n        for (i = strt; i <= end; i++)\n        {\n            if (in[i] == value)\n                return i;\n        }\n        return -1;\n    }\n    \n    TreeNode* buildTreeUtil(vector<int>& post, vector<int>& in, int inStrt, int inEnd)\n    {\n        static int postIndex = post.size()-1;\n        if (inStrt > inEnd)\n            return NULL;\n        TreeNode* tNode = new TreeNode(post[postIndex--]);\n        if (inStrt == inEnd)\n            return tNode;\n        int inIndex = search(in, inStrt, inEnd, tNode->val);\n        tNode->right = buildTreeUtil(post, in, inIndex + 1, inEnd);\n        tNode->left = buildTreeUtil(post, in, inStrt, inIndex - 1);\n        return tNode;\n    }\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        return buildTreeUtil(postorder, inorder, 0, inorder.size()-1);\n    }\n};","compare_result":"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false}