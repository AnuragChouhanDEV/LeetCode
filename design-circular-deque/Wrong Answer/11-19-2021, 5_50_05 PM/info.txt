{"id":589561355,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1637324405,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/589561355/","is_pending":"Not Pending","title":"Design Circular Deque","memory":"N/A","code":"class MyCircularDeque {\npublic:\n    int front, rear, size;\n    unsigned capacity;\n    int* array;\n    \n    MyCircularDeque(int k) {\n        capacity = k;\n        front = size = 0;\n        rear = capacity - 1;\n        array = new int[capacity];\n    }\n    \n    bool insertFront(int value) {\n        if (isFull())\n            return false;\n        front = (front - 1) % capacity;\n        array[front] = value;\n        size = size + 1;\n        return true;\n    }\n    \n    bool insertLast(int value) {\n        if (isFull())\n            return false;\n        rear = (rear + 1) % capacity;\n        array[rear] = value;\n        size = size + 1;\n        return true;\n    //cout << item << \" enqueued to queue\\n\";\n    }\n    \n    bool deleteFront() {\n        if (isEmpty())\n            return false;\n        int item = array[front];\n        front = (front + 1) % capacity;\n        size = size - 1;\n        return true;\n    }\n    \n    bool deleteLast() {\n        if (isEmpty())\n            return false;\n        int item = array[rear];\n        rear = (rear - 1) % capacity;\n        size = size - 1;\n        return true;\n    }\n    \n    int getFront() {\n        if (isEmpty())\n            return INT_MIN;\n        return array[front];\n    }\n    \n    int getRear() {\n        if (isEmpty())\n            return INT_MIN;\n        return array[rear];\n    }\n    \n    bool isEmpty() {\n        return (size == 0);\n    }\n    \n    bool isFull() {\n        return (size == capacity);\n    }\n};\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * MyCircularDeque* obj = new MyCircularDeque(k);\n * bool param_1 = obj->insertFront(value);\n * bool param_2 = obj->insertLast(value);\n * bool param_3 = obj->deleteFront();\n * bool param_4 = obj->deleteLast();\n * int param_5 = obj->getFront();\n * int param_6 = obj->getRear();\n * bool param_7 = obj->isEmpty();\n * bool param_8 = obj->isFull();\n */","compare_result":"110000001000001000000001000110111000000010100011001","title_slug":"design-circular-deque","has_notes":false}