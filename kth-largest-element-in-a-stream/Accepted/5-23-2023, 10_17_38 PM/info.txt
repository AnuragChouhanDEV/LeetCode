{"id":955920870,"lang":"cpp","lang_name":"C++","time":"2 weeks, 2 days","timestamp":1684860458,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/955920870/","is_pending":"Not Pending","title":"Kth Largest Element in a Stream","memory":"19.8 MB","code":"class KthLargest {\npublic:\n    priority_queue<int, vector<int>, greater<int>> pq;\n    int size;\n    KthLargest(int k, vector<int>& nums) {\n        if (nums.size() == 0) {size = k;return;}\n        for(auto num:nums)\n            pq.push(num);\n        while (pq.size() > k)\n            pq.pop();\n        size = k;\n    }\n    \n    int add(int val) {\n        if (pq.size() == size) {\n            if (pq.top() > val)\n                return pq.top();\n            else {\n                pq.pop();\n                pq.push(val);\n            }\n            return pq.top();\n        } else {\n            if (pq.size() <= size)\n                pq.push(val);\n        }\n        return pq.top();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */","compare_result":"1111111111","title_slug":"kth-largest-element-in-a-stream","has_notes":false}