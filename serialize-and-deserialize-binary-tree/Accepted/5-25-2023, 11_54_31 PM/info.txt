{"id":957258458,"lang":"cpp","lang_name":"C++","time":"2Â weeks","timestamp":1685039071,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/957258458/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"30 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n    TreeNode* p;\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        if (!root) return \"\";\n        queue<TreeNode*> q;\n        q.push(root);\n        string s = \"\";\n        while (!q.empty()) {\n            int size = q.size();\n            for (int i = 0; i < size; ++i) {\n                TreeNode *tmp = q.front();\n                q.pop();\n                if (tmp->val == 1002) {\n                    s += \"N,\";\n                    continue;\n                }\n                s += to_string(tmp->val)+',';\n                if (tmp->left) {\n                    q.push(tmp->left);\n                } else {q.push(new TreeNode(1002));}\n                if (tmp->right) {\n                    q.push(tmp->right);\n                } else {q.push(new TreeNode(1002));}\n            }\n        }\n        cout << s << endl;\n        return s;\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        if (data.size() == 0) return NULL;\n        stringstream s(data);\n        string str;\n        getline(s,str,',');\n        TreeNode *root = new TreeNode(stoi(str));\n        queue<TreeNode*> q;\n        q.push(root);\n        while (!q.empty()) {\n            TreeNode *tmp = q.front();\n            q.pop();\n\n            getline(s,str,',');\n            if (str == \"N\") tmp->left = NULL;\n            else {\n                tmp->left = new TreeNode(stoi(str));\n                q.push(tmp->left);\n            }\n\n            getline(s,str,',');\n            if (str == \"N\") tmp->right = NULL;\n            else {\n                tmp->right = new TreeNode(stoi(str));\n                q.push(tmp->right);\n            }\n\n        }\n        return root;\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false}