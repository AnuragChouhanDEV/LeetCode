{"id":597253556,"lang":"cpp","lang_name":"C++","time":"1 year, 6 months","timestamp":1638697744,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/597253556/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"30.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedListToBST(ListNode* head) {\n        if(!head) \n            return NULL;\n        if(!head->next) \n            return new TreeNode(head->val);\n        ListNode *slow = head, *fast = head->next;\n        while(fast->next && fast->next->next){\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        ListNode* mid = slow->next;\n        slow->next = nullptr;\n        TreeNode *root = new TreeNode(mid->val);\n        root->left = sortedListToBST(head);\n        root->right = sortedListToBST(mid->next);\n        \n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false}